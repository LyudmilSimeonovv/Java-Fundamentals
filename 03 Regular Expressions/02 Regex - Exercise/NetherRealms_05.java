package com.company;import java.util.List;import java.util.Map;import java.util.Scanner;import java.util.TreeMap;import java.util.regex.Matcher;import java.util.regex.Pattern;public class NetherRealms_05 {    public static void main(String[] args) {        Scanner scanner = new Scanner(System.in);        String nameDemons = scanner.nextLine();        String[] names = nameDemons.split(",\\s+");        Map<String, Integer> nameHealt = new TreeMap<>();        Map<String, Double> nameDamage = new TreeMap<>();        //(?<number>\d.*?\d*?)(?<command>[-*\/+]+)        String regexLetters = "([A-Za-z]+[^\\/.+\\-*]*?[^0-9]*?)";        Pattern patternLetters = Pattern.compile(regexLetters);        String regexDigit = "(-?\\d*\\.?\\d+)";        Pattern patternDigitAndCommand = Pattern.compile(regexDigit);        String regexCommand = "[*\\/]\\*?";        Pattern patternCommand = Pattern.compile(regexCommand);        for (int i = 0; i < names.length; i++) {            String deamonsName = names[i].replaceAll(" ", "");            int healt = 0;            Matcher matcherLetters = patternLetters.matcher(deamonsName);            while (matcherLetters.find()) {                String currentName = matcherLetters.group();                for (int j = 0; j < currentName.length(); j++) {                    healt += currentName.charAt(j);                }            }            if (!nameHealt.containsKey(deamonsName)) {                nameHealt.put(deamonsName, healt);            }            Matcher matcherDigits = patternDigitAndCommand.matcher(deamonsName);            double damage = 0;            while (matcherDigits.find()) {                damage += Double.parseDouble(matcherDigits.group());            }            //char currentCommand = deamonsName.charAt(deamonsName.length() - 1);            Matcher matcherCommand = patternCommand.matcher(deamonsName);            while (matcherCommand.find()) {                String currentCommand = matcherCommand.group();                for (int j = 0; j < currentCommand.length(); j++) {                    char currentSymbol = currentCommand.charAt(j);                    if (currentSymbol == '*') {                        damage = damage * 2;                    } else if (currentSymbol == '/') {                        damage = damage / 2;                    }                }            }            if (!nameDamage.containsKey(deamonsName)) {                nameDamage.put(deamonsName, damage);            }        }        for (Map.Entry<String, Double> stringDoubleEntry : nameDamage.entrySet()) {            System.out.printf("%s - %d health, %.2f damage%n", stringDoubleEntry.getKey()                    , nameHealt.get(stringDoubleEntry.getKey()), stringDoubleEntry.getValue());        }    }}